<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ShaderCompiler"#>


public class <#=ShaderName#> : MaterialBase
{
	public <#=ShaderName#>() 
	 : base (GetVSSourceCode(), GetFSSourceCode())
	{	
	}

	public ShaderProgram GetProgramObject()
	{
		return MaterialProgram;
	}

	public void Use()
	{
		MaterialProgram.UseProgram();
	}

<# int index = 0;
foreach(var Sampler in FSProgram.GetSampler2DNames())
{#>
	public void Set<#=Sampler#>2D(Core.Texture.TextureBase TextureObject)
	{
		SetTexture(@"<#=Sampler#>", TextureObject);
	}

	public void Set<#=Sampler#>2D(int TextureObject, Sampler sampler)
	{
		SetTexture(@"<#=Sampler#>", TextureObject);
	}

	public TextureBase <#=Sampler.FirstCharToUpper()#>2D 
	{	
		get { return <#=Sampler.ToLower()#>;}
		set 
		{	
			<#=Sampler.ToLower()#> = value;
			SetTexture(@"<#=Sampler#>", <#=Sampler.ToLower()#>);			
		}
	}

	private TextureBase <#=Sampler.ToLower()#> = null;
<#index++;#>
<#}#>

<#foreach(var pair in VSProgram.GetActiveUniformNameAndTypeList())#>
<#{#>
	public <#=pair.Value#> <#=pair.Key.FirstCharToUpper()#>
	{
		get { return <#=pair.Key.ToLower()#>; }
		set 
		{
			<#=pair.Key.ToLower()#> = value;
			SetUniformVarData(@"<#=pair.Key#>", <#=pair.Key.ToLower()#>);			
		}
	}
	private <#=pair.Value#> <#=pair.Key.ToLower()#> ;
<#}#>

<#foreach(var pair in FSProgram.GetActiveUniformNameAndTypeList())#>
<#{#>
	public <#=pair.Value#> <#=pair.Key.FirstCharToUpper()#>
	{
		get { return <#=pair.Key.ToLower()#>; }
		set 
		{
			<#=pair.Key.ToLower()#> = value;
			SetUniformVarData(@"<#=pair.Key#>", <#=pair.Key.ToLower()#>);			
		}
	}
	private <#=pair.Value#> <#=pair.Key.ToLower()#> ;
<#}#>

<#var BlockNameList = new List<string>();#>

<#for(int i = 0; i < VSProgram.GetActiveUniformBlockCount(); ++i)
{
    var blockname = VSProgram.GetUniformBlockName(i);
	BlockNameList.Add(blockname);
#>
    private <#=blockname#> <#=blockname.ToLower()#> = new <#=blockname#>();
	public <#=blockname#> <#=blockname#>
	{
		get { return <#=blockname.ToLower()#>; }
		set 
		{ 
			<#=blockname.ToLower()#> = value; 
			this.SetUniformBufferValue< <#=blockname#> >(@"<#=blockname#>", ref value);
		}
	}

<# var MetaDataList = VSProgram.GetUniformVariableMetaDataList(i).OrderBy(x => x.VariableOffset).ToList();#>
<# foreach(var data in MetaDataList) #>
<# { #>
	public <#=data.VariableTypeString#> <#=blockname#>_<#=data.VariableName.FirstCharToUpper()#>
	{
		get { return <#=blockname.ToLower()#>.<#=data.VariableName#> ; }
		set 
		{ 
			<#=blockname.ToLower()#>.<#=data.VariableName#> = value;
			this.SetUniformBufferValue< <#=blockname#> >(@"<#=blockname#>", ref <#=blockname.ToLower()#>);
			//this.SetUniformBufferMemberValue< <#=data.VariableTypeString#> >(@"<#=blockname#>", ref value, <#=data.VariableOffset#> );
		}
	}
<# } #>

<#}#>

<#for(int i = 0; i < FSProgram.GetActiveUniformBlockCount(); ++i)
{
    var blockname = FSProgram.GetUniformBlockName(i);
	if(BlockNameList.Contains(blockname))
	{
		continue;
	}
#>
    private <#=blockname#> <#=blockname.ToLower()#> = new <#=blockname#>();
	public <#=blockname#> <#=blockname#>
	{
		get { return <#=blockname.ToLower()#>; }
		set 
		{ 
			<#=blockname.ToLower()#> = value; 
			this.SetUniformBufferValue< <#=blockname#> >(@"<#=blockname#>", ref <#=blockname.ToLower()#>);
		}
	}

<# var MetaDataList = FSProgram.GetUniformVariableMetaDataList(i).OrderBy(x => x.VariableOffset).ToList();#>
<# foreach(var data in MetaDataList) #>
<# { #>
	public <#=data.VariableTypeString#> <#=blockname#>_<#=data.VariableName.FirstCharToUpper()#>
	{
		get { return <#=blockname.ToLower()#>.<#=data.VariableName#> ; }
		set 
		{ 
			<#=blockname.ToLower()#>.<#=data.VariableName#> = value; 
			this.SetUniformBufferValue< <#=blockname#> >(@"<#=blockname#>", ref <#=blockname.ToLower()#>);
			//this.SetUniformBufferMemberValue< <#=data.VariableTypeString#> >(@"<#=blockname#>", ref value, <#=data.VariableOffset#> );
		}
	}
<# } #>
<#}#>

	public static string GetVSSourceCode()
	{
		return @"<#=VSSourceCode#>";
	}

	public static string GetFSSourceCode()
	{
		return @"<#=FSSourceCode#>";
	}
}